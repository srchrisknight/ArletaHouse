import sys, os
from PySide import QtCore, QtGui

stylefilepath = os.path.abspath('styles.css')


class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.resize(960,700)
        self.setWindowTitle('StyleSheet')
        self.statusBar().showMessage('Ready...')
        self.setTabPosition(QtGui.QTabWidget.East, QtGui.QTabWidget.North)

        self.centralwidget = QtGui.QWidget()
        self.setCentralWidget(self.centralwidget)
        self.layout = QtGui.QVBoxLayout(self.centralwidget)

        # Actions
        self.newAct = QtGui.QAction('New', self)
        self.newAct.setShortcut('Ctrl+N')
        self.newAct.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_FileIcon')))

        self.openAct = QtGui.QAction('Open', self)
        self.openAct.setShortcut('Ctrl+O')
        self.openAct.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_DialogOpenButton')))
        
        self.saveAct = QtGui.QAction('Save', self)
        self.saveAct.setShortcut('Ctrl+S')
        self.saveAct.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_DialogSaveButton')))

        self.saveAsAct = QtGui.QAction('Save As...', self)
        self.saveAsAct.setShortcut('Ctrl+Shift+S')
        self.saveAsAct.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_DialogSaveButton')))
        self.saveAsAct.setEnabled(False)

        self.quitAct = QtGui.QAction('Quit', self)
        self.quitAct.setShortcut('Ctrl+Q')
        self.quitAct.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_MessageBoxCritical')))

        self.undoAct = QtGui.QAction('Undo', self)
        self.undoAct.setShortcut('Ctrl+Z')
        self.undoAct.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_ArrowBack')))

        self.redoAct = QtGui.QAction('Redo', self)
        self.redoAct.setShortcut('Ctrl+Y')
        self.redoAct.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_ArrowForward')))

        self.loadDarkTheme = QtGui.QAction('Load Dark Theme', self)
        self.loadDarkTheme.setShortcut('Ctrl+D')
        self.loadDarkTheme.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_FileDialogDetailedView')))
        self.loadDarkTheme.triggered.connect(lambda: self.loadStyleSheet(stylefilepath))

        self.loadLightTheme = QtGui.QAction('Load Light Theme', self)
        self.loadLightTheme.setShortcut('Ctrl+F')
        self.loadLightTheme.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_FileDialogDetailedView')))
        self.loadLightTheme.triggered.connect(lambda: self.loadStyleSheet(stylefilepath))

        self.resetAct = QtGui.QAction('Reset', self)
        self.resetAct.setShortcut('Ctrl+R')
        self.resetAct.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_DialogResetButton')))
        self.resetAct.triggered.connect(self.resetStyleSheet)

        self.toggleAct = QtGui.QAction('Toggle', self)
        self.toggleAct.setShortcut('Ctrl+G')
        self.toggleAct.setCheckable(True)
        self.toggleAct.setChecked(True)

        # Menus
        self.fileMenu = QtGui.QMenu('File', self)
        self.fileMenu.addAction(self.newAct)
        self.fileMenu.addSeparator()
        self.fileMenu.addAction(self.openAct)
        self.fileMenu.addSeparator()
        self.fileMenu.addAction(self.saveAct)
        self.fileMenu.addAction(self.saveAsAct)
        self.fileMenu.addSeparator()
        self.fileMenu.addAction(self.quitAct)

        self.subMenu = QtGui.QMenu('More', self)
        self.subMenu.addAction('Licensing...')
        self.subMenu.addAction('Updates...')

        self.editMenu = QtGui.QMenu('Edit', self)
        self.editMenu.addAction(self.undoAct)
        self.editMenu.addAction(self.redoAct)
        self.editMenu.addSeparator()
        self.editMenu.addMenu(self.subMenu)
        self.editMenu.addSeparator()
        self.editMenu.addAction('Preferences')

        self.viewMenu = QtGui.QMenu('View', self)
        self.viewMenu.setEnabled(False)

        self.helpMenu = QtGui.QMenu('Help', self)
        self.helpMenu.addAction('About')
        self.helpMenu.addAction(self.toggleAct)

        # Menubar
        self.menuBar().addMenu(self.fileMenu)
        self.menuBar().addMenu(self.editMenu)
        self.menuBar().addMenu(self.viewMenu)
        self.menuBar().addMenu(self.helpMenu)

        # Toolbar
        self.refreshToolBar = QtGui.QToolBar('StyleSheet')
        self.refreshToolBar.addAction(self.loadDarkTheme)
        self.refreshToolBar.addAction(self.loadLightTheme)
        self.refreshToolBar.addAction(self.resetAct)
        self.refreshToolBar.setIconSize(QtCore.QSize(18,18))
        self.addToolBar(self.refreshToolBar)

        self.mainToolBar = QtGui.QToolBar('File')
        self.mainToolBar.setIconSize(QtCore.QSize(18,18))
        self.mainToolBar.addAction(self.newAct)
        self.mainToolBar.addSeparator()
        self.mainToolBar.addAction(self.openAct)
        self.mainToolBar.addSeparator()
        self.mainToolBar.addAction(self.saveAct)
        self.mainToolBar.addAction(self.saveAsAct)
        self.mainToolBar.addSeparator()
        self.mainToolBar.addAction(self.toggleAct)
        self.addToolBar(self.mainToolBar)

        self.editToolBar = QtGui.QToolBar('Edit')
        self.editToolBar.setIconSize(QtCore.QSize(18,18))
        self.editToolBar.addAction(self.undoAct)
        self.editToolBar.addAction(self.redoAct)
        self.addToolBar(self.editToolBar)

        # Labels
        self.labelA = QtGui.QLabel('Enabled')
        self.labelB = QtGui.QLabel('Disabled')
        self.labelB.setEnabled(False)

        self.labelsGroup = QtGui.QGroupBox('Labels')
        self.labelsGroupLayout = QtGui.QVBoxLayout(self.labelsGroup) # r/c
        self.labelsGroupLayout.addWidget(self.labelA)
        self.labelsGroupLayout.addWidget(self.labelB)

        # Buttons
        self.buttonA = QtGui.QPushButton('Enabled')
        self.buttonB = QtGui.QPushButton('Disabled')
        self.buttonB.setEnabled(False)
        self.buttonC = QtGui.QPushButton('Checkable')
        self.buttonC.setCheckable(True)
        self.buttonC.setChecked(True)
        self.buttonD = QtGui.QPushButton('Checked Disabled')
        self.buttonD.setCheckable(True)
        self.buttonD.setEnabled(False)
        self.buttonF = QtGui.QPushButton('MessageBox')
        self.buttonF.clicked.connect(self.showMessageBox)

        self.buttonG = QtGui.QPushButton('Accent Disabled')
        self.buttonG.setProperty('style', 'green')
        self.buttonG.setEnabled(False)
        self.buttonH = QtGui.QPushButton('Green')
        self.buttonH.setProperty('style', 'green')
        self.buttonI = QtGui.QPushButton('Red')
        self.buttonI.setProperty('style', 'red')
        self.buttonJ = QtGui.QPushButton('Blue')
        self.buttonJ.setProperty('style', 'blue')
        self.buttonK = QtGui.QPushButton('Yellow')
        self.buttonK.setProperty('style', 'yellow')

        self.buttonL = QtGui.QPushButton('Icon Text')
        self.buttonL.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_DialogSaveButton')))
        self.buttonM = QtGui.QPushButton()
        self.buttonM.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_DialogSaveButton')))
        self.buttonN = QtGui.QPushButton('Simple')
        self.buttonO = QtGui.QPushButton('Icon Accent')
        self.buttonO.setProperty('style', 'red')
        self.buttonO.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_MessageBoxCritical')))
        
        self.menuButtonA = QtGui.QPushButton('Menu Button')
        self.menuButtonA.setMenu(self.fileMenu)
        self.menuButtonB = QtGui.QPushButton()
        self.menuButtonB.setProperty('style', 'red')
        self.menuButtonB.setMenu(self.fileMenu)
        self.menuButtonB.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_MessageBoxCritical')))
        
        self.hbuttons1Layout = QtGui.QHBoxLayout()
        self.hbuttons1Layout.addStretch()
        self.hbuttons1Layout.addWidget(self.buttonA)
        self.hbuttons1Layout.addWidget(self.buttonB)
        self.hbuttons1Layout.addWidget(self.buttonC)
        self.hbuttons1Layout.addWidget(self.buttonD)

        self.hbuttons2Layout = QtGui.QHBoxLayout()
        self.hbuttons2Layout.addStretch()
        self.hbuttons2Layout.addWidget(self.buttonL)
        self.hbuttons2Layout.addWidget(self.buttonM)
        self.hbuttons2Layout.addWidget(self.buttonN)
        self.hbuttons2Layout.addWidget(self.buttonO)

        self.hbuttons3Layout = QtGui.QHBoxLayout()
        self.hbuttons3Layout.addStretch()
        self.hbuttons3Layout.addWidget(self.buttonG)
        self.hbuttons3Layout.addWidget(self.buttonH)
        self.hbuttons3Layout.addWidget(self.buttonI)
        self.hbuttons3Layout.addWidget(self.buttonJ)
        self.hbuttons3Layout.addWidget(self.buttonK)

        self.hbuttons4Layout = QtGui.QHBoxLayout()
        self.hbuttons4Layout.addStretch()
        self.hbuttons4Layout.addWidget(self.menuButtonA)
        self.hbuttons4Layout.addWidget(self.menuButtonB)

        self.buttonsGroup = QtGui.QGroupBox('Buttons')
        self.buttonsGroupLayout = QtGui.QVBoxLayout(self.buttonsGroup)
        self.buttonsGroupLayout.addWidget(self.buttonF)
        self.buttonsGroupLayout.addLayout(self.hbuttons1Layout)
        self.buttonsGroupLayout.addLayout(self.hbuttons2Layout)
        self.buttonsGroupLayout.addLayout(self.hbuttons3Layout)
        self.buttonsGroupLayout.addLayout(self.hbuttons4Layout)

        # RadioButtons
        self.radiobuttonsA = QtGui.QRadioButton('Enabled')
        self.radiobuttonsB = QtGui.QRadioButton('Checked')
        self.radiobuttonsB.setChecked(True)
        self.radiobuttonsC = QtGui.QRadioButton('Checked Disabled')
        self.radiobuttonsC.setEnabled(False)
        self.radiobuttonsC.setChecked(True)
        self.radiobuttonsD = QtGui.QRadioButton('Disabled')
        self.radiobuttonsD.setEnabled(False)

        self.radiobuttonsGroup = QtGui.QGroupBox('Radiobuttons')
        self.radiobuttonsGroupLayout = QtGui.QVBoxLayout(self.radiobuttonsGroup)
        self.radiobuttonsGroupLayout.addWidget(self.radiobuttonsA)
        self.radiobuttonsGroupLayout.addWidget(self.radiobuttonsB)
        self.radiobuttonsGroupLayout.addWidget(self.radiobuttonsC)
        self.radiobuttonsGroupLayout.addWidget(self.radiobuttonsD)

        # Checkboxes
        self.checkboxA = QtGui.QCheckBox('Enabled')
        self.checkboxB = QtGui.QCheckBox('Checked')
        self.checkboxB.setChecked(True)
        self.checkboxC = QtGui.QCheckBox('Disabled')
        self.checkboxC.setEnabled(False)
        self.checkboxD = QtGui.QCheckBox('Checked Disabled')
        self.checkboxD.setEnabled(False)
        self.checkboxD.setChecked(True)
        self.checkboxE = QtGui.QCheckBox('Disabled')
        self.checkboxE.setEnabled(False)
        self.checkboxF = QtGui.QCheckBox('Tristate')
        self.checkboxF.setTristate(True)
        self.checkboxF.setCheckState(QtCore.Qt.PartiallyChecked)
        self.checkboxG = QtGui.QCheckBox('Tristate Disabled')
        self.checkboxG.setEnabled(False)
        self.checkboxG.setTristate(True)
        self.checkboxG.setCheckState(QtCore.Qt.PartiallyChecked)

        self.checkboxesGroup = QtGui.QGroupBox('Checkboxes')
        self.checkboxesGroupLayout = QtGui.QVBoxLayout(self.checkboxesGroup)
        self.checkboxesGroupLayout.addWidget(self.checkboxA)
        self.checkboxesGroupLayout.addWidget(self.checkboxB)
        self.checkboxesGroupLayout.addWidget(self.checkboxC)
        self.checkboxesGroupLayout.addWidget(self.checkboxD)
        self.checkboxesGroupLayout.addWidget(self.checkboxE)
        self.checkboxesGroupLayout.addWidget(self.checkboxF)
        self.checkboxesGroupLayout.addWidget(self.checkboxG)

        # Checkboxes Favorites
        self.favCheckboxA = QtGui.QCheckBox('Enabled')
        self.favCheckboxA.setProperty('style', 'favorite')
        self.favCheckboxB = QtGui.QCheckBox('Checked')
        self.favCheckboxB.setProperty('style', 'favorite')
        self.favCheckboxB.setChecked(True)
        self.favCheckboxC = QtGui.QCheckBox('Disabled')
        self.favCheckboxC.setProperty('style', 'favorite')
        self.favCheckboxC.setEnabled(False)
        self.favCheckboxD = QtGui.QCheckBox('Checked Disabled')
        self.favCheckboxD.setProperty('style', 'favorite')
        self.favCheckboxD.setEnabled(False)
        self.favCheckboxD.setChecked(True)
        self.favCheckboxE = QtGui.QCheckBox('Disabled')
        self.favCheckboxE.setProperty('style', 'favorite')
        self.favCheckboxE.setEnabled(False)

        self.favCheckboxesGroup = QtGui.QGroupBox('Favroites')
        self.favCheckboxesGroupLayout = QtGui.QVBoxLayout(self.favCheckboxesGroup)
        self.favCheckboxesGroupLayout.addWidget(self.favCheckboxA)
        self.favCheckboxesGroupLayout.addWidget(self.favCheckboxB)
        self.favCheckboxesGroupLayout.addWidget(self.favCheckboxC)
        self.favCheckboxesGroupLayout.addWidget(self.favCheckboxD)
        self.favCheckboxesGroupLayout.addWidget(self.favCheckboxE)

        # Sliders
        self.sliderA = QtGui.QSlider(QtCore.Qt.Horizontal)
        self.sliderA.setValue(50)
        self.sliderB = QtGui.QSlider(QtCore.Qt.Horizontal)
        self.sliderB.setValue(50)
        self.sliderB.setEnabled(False)
        self.sliderC = QtGui.QSlider(QtCore.Qt.Vertical)
        self.sliderC.setValue(50)
        self.sliderC.setFixedHeight(50)
        self.sliderD = QtGui.QSlider(QtCore.Qt.Vertical)
        self.sliderD.setEnabled(False)
        self.sliderD.setValue(50)
        self.sliderD.setFixedHeight(50)

        self.slidersGroup = QtGui.QGroupBox('Sliders')
        self.slidersGroupLayout = QtGui.QGridLayout(self.slidersGroup) # r/c
        self.slidersGroupLayout.addWidget(self.sliderC,0,0,2,1)
        self.slidersGroupLayout.addWidget(self.sliderD,0,1,2,1)
        self.slidersGroupLayout.addWidget(self.sliderB,0,2)
        self.slidersGroupLayout.addWidget(self.sliderA,1,2)

        # ProgressBar
        self.progressBarA = QtGui.QProgressBar()
        self.progressBarA.setValue(57)
        self.progressBarA.setTextVisible(True)
        self.progressBarB = QtGui.QProgressBar()
        self.progressBarB.setValue(57)
        self.progressBarB.setAlignment(QtCore.Qt.AlignCenter)
        self.progressBarB.setEnabled(False)

        self.progressBarGroup = QtGui.QGroupBox('Progress Bar')
        self.progressBarGroupLayout = QtGui.QVBoxLayout(self.progressBarGroup) # r/c
        self.progressBarGroupLayout.addWidget(self.progressBarA)
        self.progressBarGroupLayout.addWidget(self.progressBarB)

        # Splitters
        self.splitterA = QtGui.QSplitter(QtCore.Qt.Horizontal)
        self.splitterA.setHandleWidth(2)
        self.splitterA.setChildrenCollapsible(False)
        self.splitterA.addWidget(self.radiobuttonsGroup)
        self.splitterA.addWidget(self.checkboxesGroup)
        self.splitterA.addWidget(self.favCheckboxesGroup)

        self.splitterA2 = QtGui.QSplitter(QtCore.Qt.Horizontal)
        self.splitterA2.setHandleWidth(2)
        self.splitterA2.setChildrenCollapsible(False)
        self.splitterA2.addWidget(self.slidersGroup)
        self.splitterA2.addWidget(self.progressBarGroup)

        # Controls A Layout
        self.controlsAWidget = QtGui.QWidget()
        self.controlsALayout = QtGui.QVBoxLayout(self.controlsAWidget)
        self.controlsALayout.addWidget(self.labelsGroup)
        self.controlsALayout.addWidget(self.buttonsGroup)
        self.controlsALayout.addWidget(self.splitterA)
        self.controlsALayout.addWidget(self.splitterA2)

        # ToolButton
        self.toolbuttonLabel = QtGui.QLabel('ToolButtons')
        self.toolbuttonA = QtGui.QToolButton()
        self.toolbuttonA.setText('Active')
        self.toolbuttonB = QtGui.QToolButton()
        self.toolbuttonB.setText('Disabled')
        self.toolbuttonB.setEnabled(False)
        self.toolbuttonC = QtGui.QToolButton()
        self.toolbuttonC.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_MessageBoxCritical')))
        self.toolbuttonD = QtGui.QToolButton()
        self.toolbuttonD.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_MessageBoxCritical')))
        self.toolbuttonD.setEnabled(False)
        self.toolbuttonE = QtGui.QToolButton()
        self.toolbuttonE.setText('Active')
        self.toolbuttonE.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.toolbuttonE.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_MessageBoxCritical')))
        self.toolbuttonF = QtGui.QToolButton()
        self.toolbuttonF.setText('Disabled')
        self.toolbuttonF.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.toolbuttonF.setIcon(self.style().standardIcon(getattr(QtGui.QStyle,'SP_MessageBoxCritical')))
        self.toolbuttonF.setEnabled(False)
        self.toolbuttonG = QtGui.QToolButton()
        self.toolbuttonG.setText('Checkable')
        self.toolbuttonG.setCheckable(True)
        self.toolbuttonH = QtGui.QToolButton()
        self.toolbuttonH.setText('Checkable Checked')
        self.toolbuttonH.setCheckable(True)
        self.toolbuttonH.setChecked(True)
        self.toolbuttonI = QtGui.QToolButton()
        self.toolbuttonI.setCheckable(True)
        self.toolbuttonI.setText('Checkable Disabled')
        self.toolbuttonI.setEnabled(False)

        self.toolbuttonLayout = QtGui.QVBoxLayout()
        self.toolbuttonLayout.addWidget(self.toolbuttonLabel)
        self.toolbuttonLayout.addWidget(self.toolbuttonA)
        self.toolbuttonLayout.addWidget(self.toolbuttonB)
        self.toolbuttonLayout.addWidget(self.toolbuttonC)
        self.toolbuttonLayout.addWidget(self.toolbuttonD)
        self.toolbuttonLayout.addWidget(self.toolbuttonE)
        self.toolbuttonLayout.addWidget(self.toolbuttonF)
        self.toolbuttonLayout.addWidget(self.toolbuttonG)
        self.toolbuttonLayout.addWidget(self.toolbuttonH)
        self.toolbuttonLayout.addWidget(self.toolbuttonI)

        # Spinbox
        self.spinnerLabel = QtGui.QLabel('Spinners')
        self.spinnerA = QtGui.QSpinBox()
        self.spinnerB = QtGui.QSpinBox()
        self.spinnerD = QtGui.QSpinBox()
        self.spinnerD.setButtonSymbols(QtGui.QAbstractSpinBox.NoButtons)
        self.spinnerB.setEnabled(False)
        self.spinnerC = QtGui.QDoubleSpinBox()

        self.spinnerGroup = QtGui.QGroupBox()
        self.spinnerGroupLayout = QtGui.QVBoxLayout(self.spinnerGroup) # r/c
        self.spinnerGroupLayout.addLayout(self.toolbuttonLayout)
        self.spinnerGroupLayout.addWidget(self.spinnerLabel)
        self.spinnerGroupLayout.addWidget(self.spinnerA)
        self.spinnerGroupLayout.addWidget(self.spinnerB)
        self.spinnerGroupLayout.addWidget(self.spinnerC)
        self.spinnerGroupLayout.addWidget(self.spinnerD)

        # LineEdit
        self.lineEditA = QtGui.QLineEdit()
        self.lineEditA.setPlaceholderText("Placeholder text...")
        self.lineEditB = QtGui.QLineEdit()
        self.lineEditB.setText("Editable")
        self.lineEditC = QtGui.QLineEdit()
        self.lineEditC.setText("Disabled")
        self.lineEditC.setEnabled(False)
        self.lineEditD = QtGui.QLineEdit()
        self.lineEditD.setText("Read Only")
        self.lineEditD.setReadOnly(True)
        self.lineEditE = QtGui.QLineEdit()
        # self.lineEditE.setText("Editable")
        # self.lineEditE.setProperty('style', 'yellow')

        self.lineEditGroup = QtGui.QGroupBox('LineEdits')
        self.lineEditGroup.setCheckable(True)
        self.lineEditGroupLayout = QtGui.QVBoxLayout(self.lineEditGroup) # r/c
        self.lineEditGroupLayout.addWidget(self.lineEditA)
        self.lineEditGroupLayout.addWidget(self.lineEditB)
        self.lineEditGroupLayout.addWidget(self.lineEditC)
        self.lineEditGroupLayout.addWidget(self.lineEditD)
        # self.lineEditGroupLayout.addWidget(self.lineEditE)

        # TextEdit
        self.textEditA = QtGui.QTextEdit()
        self.textEditA.setText("Editable\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
        self.textEditA.setMinimumHeight(10)
        self.textEditA.setMinimumWidth(50)
        self.textEditA.setSizePolicy(QtGui.QSizePolicy.Ignored, QtGui.QSizePolicy.Ignored)
        self.textEditB = QtGui.QTextEdit()
        self.textEditB.setText("Disabled")
        self.textEditB.setEnabled(False)
        self.textEditB.setMinimumHeight(10)
        self.textEditB.setMinimumWidth(50)
        self.textEditB.setSizePolicy(QtGui.QSizePolicy.Ignored, QtGui.QSizePolicy.Ignored)
        self.textEditC = QtGui.QTextEdit()
        self.textEditC.setText("Read Only")
        self.textEditC.setReadOnly(True)
        self.textEditC.setMinimumHeight(10)
        self.textEditC.setMinimumWidth(50)
        self.textEditC.setSizePolicy(QtGui.QSizePolicy.Ignored, QtGui.QSizePolicy.Ignored)

        self.textEditGroup = QtGui.QGroupBox('TextEdits')
        self.textEditGroupLayout = QtGui.QVBoxLayout(self.textEditGroup)
        self.textEditGroupLayout.addWidget(self.textEditA)
        self.textEditGroupLayout.addWidget(self.textEditB)
        self.textEditGroupLayout.addWidget(self.textEditC)

        # ComboBox
        self.comboBoxA = QtGui.QComboBox()
        self.comboBoxA.addItems(['Item {}'.format(x) for x in range(20)])
        self.comboBoxB = QtGui.QComboBox()
        self.comboBoxB.setEnabled(False)
        self.comboBoxB.addItems(['Item {}'.format(x) for x in range(20)])
        self.comboBoxC = QtGui.QComboBox()
        self.comboBoxC.setEnabled(False)
        self.comboBoxC.setEditable(True)
        self.comboBoxC.addItems(['Item {}'.format(x) for x in range(20)])
        self.comboBoxD = QtGui.QComboBox()
        self.comboBoxD.setEditable(True)
        self.comboBoxD.addItems(['Item {}'.format(x) for x in range(20)])

        self.comboBoxGroup = QtGui.QGroupBox('ComboBoxes')
        self.comboBoxGroupLayout = QtGui.QVBoxLayout(self.comboBoxGroup)
        self.comboBoxGroupLayout.addWidget(self.comboBoxA)
        self.comboBoxGroupLayout.addWidget(self.comboBoxB)
        self.comboBoxGroupLayout.addWidget(self.comboBoxC)
        self.comboBoxGroupLayout.addWidget(self.comboBoxD)

        # Item Model
        self.itemModel = QtGui.QStandardItemModel()
        self.itemModel.setHorizontalHeaderLabels(['Item','First Name','Last Name','NickName'])
        self.itemModel.setSortRole(QtCore.Qt.DisplayRole)
        self.itemModel.sort(QtCore.Qt.DisplayRole, QtCore.Qt.AscendingOrder)
        for i in range(10):
            parent = QtGui.QStandardItem(str(i))
            parent.setCheckable(True)
            for x in range(3):
                col1 = QtGui.QStandardItem("Col 0" + str(x))
                col2 = QtGui.QStandardItem("Col 1" + str(x))
                col3 = QtGui.QStandardItem("Col 1" + str(x))
                col4 = QtGui.QStandardItem("Col 1" + str(x))
                parent.appendRow([col1, col2, col3, col4])
            self.itemModel.appendRow(parent)
        self.itemModel.sort(0, QtCore.Qt.DescendingOrder)

        # TableView
        self.tableViewA = QtGui.QTableView()
        self.tableViewA.setSortingEnabled(True)
        self.tableViewA.setAlternatingRowColors(True)
        self.tableViewA.setModel(self.itemModel)

        self.tableViewB = QtGui.QTableView()
        self.tableViewB.setSortingEnabled(True)
        self.tableViewB.setModel(self.itemModel)
        self.tableViewB.setAlternatingRowColors(True)
        self.tableViewB.setProperty('style','list')

        # Splitter
        self.splitterB = QtGui.QSplitter(QtCore.Qt.Horizontal)
        self.splitterB.setHandleWidth(1)
        self.splitterB.setChildrenCollapsible(False)
        self.splitterB.addWidget(self.spinnerGroup)
        self.splitterB.addWidget(self.lineEditGroup)
        self.splitterB.addWidget(self.textEditGroup)
        self.splitterB.addWidget(self.comboBoxGroup)

        # Controls B Layout
        self.controlsBTabWidget = QtGui.QTabWidget()
        self.controlsBTabWidget.setTabsClosable(True)
        self.controlsBTabWidget.setTabPosition(QtGui.QTabWidget.North)
        self.layout.addWidget(self.controlsBTabWidget)

        self.controlsBWidget = QtGui.QWidget()
        self.controlsBLayout = QtGui.QVBoxLayout(self.controlsBWidget)
        self.controlsBLayout.addWidget(self.splitterB)
        self.controlsBLayout.addWidget(self.splitterB)
        self.controlsBTabWidget.addTab(self.controlsBWidget, self.style().standardIcon(getattr(QtGui.QStyle,'SP_FileIcon')), 'Controls B')
        self.controlsBTabWidget.addTab(self.tableViewB, 'Tables')
        self.controlsBTabWidget.addTab(QtGui.QWidget(), 'Empty')

        # TreeView
        self.treeViewA = QtGui.QTreeView()
        self.treeViewA.setSortingEnabled(True)
        self.treeViewA.setModel(self.itemModel)
        self.treeViewA.setAlternatingRowColors(True)
        self.treeViewA.expandAll()

        # ListView
        self.listViewA = QtGui.QListView()
        self.listViewA.setAlternatingRowColors(True)
        self.listViewA.setModel(self.itemModel)
        self.listViewA.setSpacing(3)

        # GroupBox
        self.itemViewsGroup = QtGui.QGroupBox('Item Views')
        self.itemViewsGroup.setCheckable(True)
        self.itemViewsGroupLayout = QtGui.QHBoxLayout(self.itemViewsGroup)
        self.itemViewsGroupLayout.addWidget(self.treeViewA)
        self.itemViewsGroupLayout.addWidget(self.tableViewA)
        self.itemViewsGroupLayout.addWidget(self.listViewA)

        # Controls C Layout
        self.controlsCWidget = QtGui.QWidget()
        self.controlsCLayout = QtGui.QVBoxLayout(self.controlsCWidget)
        self.controlsCLayout.setContentsMargins(0,0,0,0)
        self.controlsCLayout.addWidget(self.itemViewsGroup)
        self.layout.addWidget(self.controlsCWidget)


        # Dock Widgets
        self.dockWidgetA = QtGui.QDockWidget(self)
        self.dockWidgetA.setWindowTitle("DockWidget A")
        self.dockWidgetA.setWidget(self.controlsAWidget)
        self.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidgetA)
        
        self.dockWidgetB = QtGui.QDockWidget(self)
        self.dockWidgetB.setWindowTitle("DockWidget B")
        self.addDockWidget(QtCore.Qt.DockWidgetArea(1), self.dockWidgetB)

        # Tabify the widgets
        self.tabifyDockWidget(self.dockWidgetB, self.dockWidgetA)

        self._timer = QtCore.QTimer(self)
        self._timer.setInterval(1000 * 3) # 1000 = 1 second
        self._timer.start()
        self._timer.timeout.connect(lambda: self.loadStyleSheet(stylefilepath))


    def showMessageBox(self):
        reply = QtGui.QMessageBox.question(self, "Test", "Quit?", QtGui.QMessageBox.Yes|QtGui.QMessageBox.No);


    def loadStyleSheet(self, theme):
        package_directory = os.path.dirname(os.path.abspath(__file__))
        resource_path = os.path.normpath(os.path.join(package_directory, theme))
        if not os.path.exists(resource_path):
            return False

        css = QtCore.QFile(resource_path)
        css.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text)
        ss = QtCore.QTextStream(css).readAll()

        icon_directory = os.path.dirname(resource_path)
        icon_path = os.path.normpath(os.path.join(icon_directory, 'icons'))
        if os.path.isdir(icon_path):
            icon_path = icon_path.replace('\\', '/')
            ss = ss.replace('[PATH]', icon_path)

        self.setStyleSheet(ss)


    def resetStyleSheet(self):
        self.setStyleSheet('')


def main():
    app = QtGui.QApplication(sys.argv)
    window = MainWindow()
    window.loadStyleSheet(stylefilepath)
    window.show()
    app.exec_()


if __name__ == '__main__':
    main()