'''
Description:
    This module contains methods used to style GUI's created in Pyside.

    There are methods to create icons that can be used for buttons and other gui
    widgets.
'''
################################################################################
# Imports
################################################################################
import os, sys, re
from inspect import getsourcefile
sys.path.append(os.path.dirname(os.path.abspath(getsourcefile(lambda:0))))
sys.path.append(os.environ.get('PS_SITEPACKAGES'))
from Qt import QtCore, QtGui, QtWidgets


################################################################################
# Methods
################################################################################
def setStyleSheet(widget):
    '''
    Description:
        This is used to set the style theme for the given application

    Args:
        widget (qwidget): The qwidget that you want to apply the stylesheet to

    Returns:
        bool: Returns true if successful otherwise false
    '''
    root = os.path.dirname(os.path.abspath(getsourcefile(lambda:0)))
    filepath = os.path.join(root, 'Resources', 'Themes', 'Moreno', 'styles.css') 
    
    if not os.path.exists(filepath):
        return False

    css = QtCore.QFile(filepath)
    css.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text)
    ss = QtCore.QTextStream(css).readAll()

    themeDir = os.path.dirname(filepath)
    iconsDir = os.path.normpath(os.path.join(themeDir, 'icons'))
    if os.path.isdir(iconsDir):
        iconsDir = iconsDir.replace('\\', '/')
        ss = ss.replace('[PATH]', iconsDir)

    widget.setStyleSheet(ss)
    return True


def getIcon(filename):
    '''
    Description:
        Uses the name build an icon. If the icon has additional states like
        disabled, pressed, it will append those to the icon instance.
        It's assuming all icons are SVG
    '''
    root = os.path.dirname(os.path.abspath(getsourcefile(lambda:0)))
    iconsDir = os.path.normpath(os.path.join(root, 'Resources', 'Icons'))

    icon = QtGui.QIcon()

    default = os.path.join(iconsDir, filename + '.svg')
    if os.path.isfile(default):
        icon.addPixmap(QtGui.QPixmap(default), QtGui.QIcon.Normal)

    disabled = os.path.join(iconsDir, filename + '_disabled.svg')
    if os.path.isfile(disabled):
        icon.addPixmap(QtGui.QPixmap(disabled), QtGui.QIcon.Disabled)

    active = os.path.join(iconsDir, filename + '_active.svg')
    if os.path.isfile(active):
        icon.addPixmap(QtGui.QPixmap(active), QtGui.QIcon.Active)

    return icon


################################################################################
# Dialog
################################################################################
class IconWidget(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super(IconWidget, self).__init__()

        self.label = QtWidgets.QLabel()
        self.button1 = QtWidgets.QToolButton() 
        self.button1.setIconSize(QtCore.QSize(48,48)) 
        self.button2 = QtWidgets.QToolButton() 
        self.button2.setIconSize(QtCore.QSize(48,48)) 
        self.button2.setEnabled(False)
        self.copyButton = QtWidgets.QPushButton('Copy')
        self.copyButton.setToolTip('Copies python snippet to clipboard for using icon')

        self.mainLayout = QtWidgets.QHBoxLayout(self)
        self.mainLayout.setContentsMargins(2,2,2,2)
        self.mainLayout.setSpacing(2)
        self.mainLayout.addWidget(self.label)
        self.mainLayout.addStretch()
        self.mainLayout.addWidget(self.button1)
        self.mainLayout.addWidget(self.button2)
        self.mainLayout.addWidget(self.copyButton)

        self.copyButton.clicked.connect(self.copySnippet)


    def copySnippet(self):
        text = 'StyleUtils.getIcon(\'{}\')'.format(self.label.text())
        QtGui.QClipboard().setText(text)


class IconDialog(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(IconDialog,self).__init__(parent=parent)
        self.resize(600,600)
        setStyleSheet(self)

        # Central Widget
        self.uiCentralWidget = QtWidgets.QWidget()

        # controls
        self.uiSearchInput = QtWidgets.QLineEdit()
        self.uiSearchInput.setPlaceholderText('Search...')
        self.uiListView = QtWidgets.QListWidget()

        # layout
        self.mainLayout = QtWidgets.QVBoxLayout()
        self.mainLayout.addWidget(self.uiSearchInput)
        self.mainLayout.addWidget(self.uiListView)
        self.uiCentralWidget.setLayout(self.mainLayout)
        self.setCentralWidget(self.uiCentralWidget)

        # signals
        self.uiSearchInput.textChanged.connect(self.filterItems)

        # being
        self.populate()

    # methods
    def filterItems(self):
        text = self.uiSearchInput.text()
        count = self.uiListView.count()
        for i in range(count):
            widget = self.uiListView.item(i)
            data = widget.data(QtCore.Qt.UserRole)
            if data and re.search(text, data, flags=re.IGNORECASE) or not text:
                widget.setHidden(False)
            else:
                widget.setHidden(True)


    def populate(self):
        # Auto collect all icons for easier testing icons
        root = os.path.dirname(os.path.abspath(getsourcefile(lambda:0)))
        iconsDir = os.path.join(root, 'Resources/Icons')

        icons = []
        # icons = ['submit','add','cursor','delete','delete_all','close','menu','healing','done_all']
        for f in os.listdir(iconsDir):
            if not '_disabled.svg' in f and not '_active.svg' in f:
                icons.append(os.path.splitext(f)[0])

        icons = sorted(icons)
        for i, x in enumerate(icons):

            wid = IconWidget()
            wid.label.setText(icons[i])
            wid.button1.setIcon(getIcon(x))
            wid.button2.setIcon(getIcon(x))
 
            wid2 = QtWidgets.QListWidgetItem()
            wid2.setData(QtCore.Qt.UserRole, icons[i])
            wid2.setSizeHint(wid.sizeHint())
            self.uiListView.addItem(wid2)
            self.uiListView.setItemWidget(wid2, wid)

        
################################################################################
# Unit Testing
################################################################################
def unitTest_setStyleSheet():
    app = QtWidgets.QApplication(sys.argv)
    ex = QtWidgets.QMainWindow()
    setStyleSheet(ex)
    ex.show()
    sys.exit(app.exec_())


def unitTest_IconPreviewWindow():
    app = QtWidgets.QApplication(sys.argv)
    ex = IconDialog()
    ex.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    pass
    # unitTest_setStyleSheet()
    unitTest_IconPreviewWindow()